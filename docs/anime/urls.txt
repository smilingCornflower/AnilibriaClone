release/filter/?data={
    "genres":[str, ...],
    "year":[int, ...],
    "season":[str, ...],
    "popular_or_new": str,
    "is_completed": bool,
}
    Метод: GET

    После указания URL можно указать через знак вопроса data={} параметры фильтрации и сортировки

    Если не указать data и сделать запрос по release/filter/ не будет применены параметры фильтрации
    и будут выведены все аниме в порядке популярности в формате anime_panel

    "genres"=["Экшен", "Сёнен"] - Это параметр фильтрации, в данном примере будут выведены только те аниме,
    которые имеют в жанрах Экшен и Сёнен. Аниме могут иметь и другие жанры, но все жанры в genres должны быть в аниме




release/watch/random/
    Метод: GET
    Возвращает словарь с информацией по случайному аниме в формате anime_dict


release/watch/<int:anime_id>/
release/watch/<slug:anime_slug>/
    Метод: GET
    Возвращает аниме c id=anime_id или slug=anime_slug в формате anime_dict
    Если же в базе данных нету такого аниме, то вернётся ответ с статусом 404
        и с информацией об ошибке {"detail": "Информация"}


release/watch/<int:anime_id>/<int:episode_number>/
release/watch/<slug:anime_slug>/<int:episode_number>/
    Метод: GET
    Возвращает ссылку на конкретный эпизод episode_number для аниме с id=anime_id или slug=anime_slug
    {
        "episode_url": episode_url,
        "episode_number": episode_number,
    }
    Если же в базе данных нету такого эпизода, то статус в ответе будет 404
    и также информация об ошибке {"detail": "информация"}

    Если же в s3 хранилище нету такой серии, а в бд она есть, то будет возвращена нерабочая
    ссылка на несуществующее аниме